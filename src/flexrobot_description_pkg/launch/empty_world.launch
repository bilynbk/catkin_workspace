<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="worlds/empty.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->

  <!-- set use_sim_time flag -->
  <group if="$(arg use_sim_time)">
    <param name="/use_sim_time" value="true" />
  </group>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg headless)" name="command_arg2" value=""/>
  <arg     if="$(arg headless)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo_ros server-->
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="false" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo_ros client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

<!--- Load model -->

  <!-- Load the xacro into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find flexrobot_description_pkg)/urdf/FlexRobotwSupporter_v3_2.xacro'"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  args="-urdf -model FlexRobotwSupporter_v3_2 -param robot_description"/>
  
<!-- finish loading model -->

<!-- Load control--> 
  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find flexrobot_description_pkg)/config/flexRobotwSupporter_v3_2_gazebo_posCtrl.yaml" command="load"/>


  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
  output="screen" ns="/FlexRobotwSupporter_v3_2" args="joint_state_controller
            FrontLeftHipJoint_position_controller
            FrontLeftKneeJoint_position_controller
            FrontRightHipJoint_position_controller
            FrontRightKneeJoint_position_controller
            RearLeftHipJoint_position_controller
            RearLeftKneeJoint_position_controller
            RearRightHipJoint_position_controller
            RearRightKneeJoint_position_controller"/>

  
  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
  respawn="false" output="screen">
    <remap from="/joint_states" to="/FlexRobotwSupporter_v3_2/joint_states"/>
  </node>
  
<!-- finish loading control-->

</launch>
